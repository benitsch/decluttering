id,type,comment,code,Expected
375,Line,... xxx todo: add standard entries,"XComponentContext xContext = new ComponentContext(context_entries, null);",
376,Line,"""clean"" url is decoded value of ""url"" parameter","if (pair.startsWith(""url="")) {",
377,Line,(Only) after a successful save the following statement marks that the base is unchanged since last save:,panel.setNonUndoableChange(false);,
378,Javadoc,{@link EntryAddedEvent} is fired when a new {@link BibEntry} was added to the {@link BibDatabase}.,public class EntryAddedEvent extends EntryEvent {,
379,Line,@formatter:off,library.getItems().addAll(,
380,Javadoc,<code>RemovedEntryEvent</code> is fired when a <code>BibEntry</code> was removed from the database.,,
381,Line,1. metadata user-specific directory,metaData.getUserFileDirectory(preferences.getUser()),
382,Javadoc,A bibliography database.,public class BibDatabase {,
383,Line,A reference to the entry this editor works on.,private BibEntry entry;,
384,Javadoc,"A small table, where an entry type is associated with a Bibtex key pattern (an <code>ArrayList</code>). A parent BibtexKeyPattern can be set.",public abstract class AbstractBibtexKeyPattern {,
385,Block,Actions for the TreeView *,"private void expandTree(TreeItem<?> item, boolean expand) {",
386,Line,Add as child,"target.addChild((T) this, targetIndex);",
387,Javadoc,Add the given new possible suggestions to thisSuggestionProvider,"public void addPossibleSuggestions(@SuppressWarnings(""unchecked"") T... newPossible) {",
388,Line,Added externally.,"fieldChanges.add(new FieldChangeViewModel(field, memEntry, tmpEntry, mem.orElse(null), tmp.orElse(null), disk.orElse(null)));",
389,Javadoc,Adds the given function to the list of subscribers which are notified when something changes in the subtree. The following events are supported (the text in parentheses specifies which node is passed as the source): - addChild (new parent) - removeChild (old parent) - move (old parent and new parent),public void subscribeToDescendantChanged(Consumer<T> subscriber) {,
390,Line,All entries,entries = frame.getCurrentBasePanel().getDatabase().getEntries();,
391,Line,all groups need a name,boolean okEnabled = !nameField.getText().trim().isEmpty();,
392,Line,"All set, call the operation in a new thread:",BackgroundTask.wrap(this::pushEntries),
393,Line,alt on win,"LOGGER.debug(""Mode MOVE"");",
394,Javadoc,An Action class representing the process of invoking a PushToApplication operation.,public class PushToApplicationAction extends SimpleCommand {,
395,Javadoc,An enum which contains the possible {@link BibDatabase} Modes. Possible are BibTeX and biblatex.,public enum BibDatabaseMode {,
396,Javadoc,"An object that executes submitted {@link Task}s. This interface provides a way of decoupling task submission from the mechanics of how each task will be run, including details of thread use, scheduling, thread pooling, etc.",public interface TaskExecutor {,
397,Line,Arrow indicating expanded status,new ViewModelTreeTableCellFactory<GroupNodeViewModel>(),
398,Line,"As the Doi field is empty we now check if note, url, or ee field contains a Doi",for (Field field : FIELDS) {,
399,Javadoc,Asks for details about merge database operation.,public class AppendDatabaseDialog extends BaseDialog<Boolean> {,
400,Javadoc,Backwards compatibility stub.,"public static final XComponentContext defaultBootstrap_InitialComponentContext(String ini_file, Hashtable<String, String> bootstrap_parameters) throws Exception {",
401,Javadoc,"BaseAction is used to define actions that are called from the base frame through runCommand(). runCommand() finds the appropriate BaseAction object, and runs its action() method.",@FunctionalInterface,
402,Javadoc,Binds propertA bidirectional to propertyB using updateB to update propertyB when propertyA changed and similar for updateA.,"public static <A, B> void bindBidirectional(ObservableValue<A> propertyA, ObservableValue<B> propertyB, Consumer<B> updateA, Consumer<A> updateB) {",
403,Javadoc,Binds propertA bidirectional to propertyB while using updateB to update propertyB when propertyA changed.,"public static <A> void bindBidirectional(Property<A> propertyA, ObservableValue<A> propertyB, Consumer<A> updateB) {",
404,Javadoc,"Bootstrap offers functionality to obtain a context or simply a service manager. The service manager can create a few basic services, whose implementationsare: <ul> <li>com.sun.star.comp.loader.JavaLoader</li> <li>com.sun.star.comp.urlresolver.UrlResolver</li> <li>com.sun.star.comp.bridgefactory.BridgeFactory</li> <li>com.sun.star.comp.connections.Connector</li> <li>com.sun.star.comp.connections.Acceptor</li> <li>com.sun.star.comp.servicemanager.ServiceManager</li> </ul> Other services can be inserted into the service manager by using its XSet interface: <pre> XSet xSet = UnoRuntime.queryInterface( XSet.class, aMultiComponentFactory ); // insert the service manager xSet.insert( aSingleComponentFactory ); </pre>",public class Bootstrap {,
405,Line,can not use BackgroundTask.wrap(Runnable) because Runnable.run() can't throw exceptions,return null;,
406,Javadoc,Check if the given keyCombination equals the given keyEvent,"public static boolean checkKeyCombinationEquality(KeyCombination combination, KeyEvent keyEvent) {",
407,Line,Check if we are inside a footnote:,"if (UnoRuntime.queryInterface(XFootnote.class, range.getText()) != null) {",
408,Line,Check that there are no empty strings.,if (layoutFile.get().isEmpty() || name.get().isEmpty() || extension.get().isEmpty(),
409,Line,Check the potentially different fields,for (Field field : differentFields) {,
410,Line,Check whether old defaultLabelPattern is set,"String oldDefault = mainPrefsNode.get(""defaultLabelPattern"", null);",
411,Javadoc,Checks if there is more than one occurrence of this key,private boolean isDuplicateCiteKeyExisting(String citeKey) {,
412,Javadoc,Class for generating a dialog showing warnings from ParserResult,public class ParserResultWarningDialog {,
413,Line,class is indirectly constructed by log4j,"@SuppressWarnings(""unused"")",
414,Javadoc,Cleanup the entry.,List<FieldChange> cleanup(BibEntry entry);,
415,Line,"Clip content if it expands above pref height (no idea why this is needed, but otherwise sometimes the text is still visible)",clip.setHeight(computePrefHeight(this.getWidth()));,
416,Javadoc,Comparator for rankings. Inverse comparison of ranking as rank5 is higher than rank1,public class RankingFieldComparator implements Comparator<Optional<SpecialFieldValueViewModel>> {,
417,Line,concatenate pages,if ((pages[0] != null) || (pages[1] != null)) {,
418,Javadoc,Constructs a tree node without parent and no children.,public TreeNode(Class<T> derivingClass) {,
419,Line,continuation (folding) of previous line,if (previousLine == null) {,
420,Javadoc,"Convert the given string according to the format character (title, lower, up) and append the result to the stringBuffer, return the updated position.","private int convertAccented(char[] c, int start, String s, StringBuilder sb, FORMAT_MODE format) {",
421,Javadoc,"Converts legacy explicit groups, where the group contained a list of assigned entries, to the new format, where the entry stores a list of groups it belongs to.",public class ConvertLegacyExplicitGroups implements PostOpenMigration {,
422,Javadoc,"Converts legacy explicit groups, where the group contained a list of assigned entries, to the new format, where the entry stores a list of groups it belongs to.",public class ConvertMarkingToGroups implements PostOpenMigration {,
423,Line,Could not resolve string. Display the # characters rather than removing them:,"newRes.append(res, next, stringEnd + 1);",
424,Line,create a URL resolver,XUnoUrlResolver xUrlResolver = UnoUrlResolver.create(xLocalContext);,
425,Line,"Create the desktop, which is the root frame of the hierarchy of frames that contain viewable components:",Object desktop;,
426,Javadoc,Creates a column for specific file types. Shows the icon for the given type (or the FILE_MULTIPLE icon),"private TableColumn<BibEntryTableViewModel, List<LinkedFile>> createExtraFileColumn(String externalFileTypeName) {",
427,Javadoc,"Creates a copy of this node, completely separated from the tree (i.e. no children and no parent)",public abstract T copyNode();,
428,Line,creating new group -> defaults!,colorField.setValue(IconTheme.getDefaultGroupColor());,
429,Block,css: calendar *,"DATE_PICKER(MaterialDesignIcon.CALENDAR),",
430,Block,css: eye *,"READ_STATUS_SKIMMED(Color.ORANGE, MaterialDesignIcon.EYE),",
431,Block,css: import *,"WRITE_XMP(MaterialDesignIcon.IMPORT),",
432,Block,css: label *,"REQUIRED(MaterialDesignIcon.LABEL),",
433,Block,css: mdi-alphabetical *,"CASE_SENSITIVE(MaterialDesignIcon.ALPHABETICAL),",
434,Line,"Ctrl on Windows, no modifier on Xubuntu","LOGGER.debug(""Mode COPY"");",
435,Line,default,"return new SimpleEditor(field, suggestionProvider, fieldCheckers, preferences, isSingleLine);",
436,Line,Description panel,ScrollPane descriptionPane = new ScrollPane(descriptionTextFlow);,
437,Javadoc,Determines which bibtex cite keys are duplicates in a single {@link BibDatabase}.,public class DuplicationChecker {,
438,Line,"Directory preferences are not yet migrated, since it is not quote clear how to parse and reinterpret the user defined old-style patterns, and the default pattern is """".",},
439,Line,DOI search,Optional<DOI> doi = entry.getField(StandardField.DOI).flatMap(DOI::parse);,
440,Line,Double click -> edit,linkedFile.edit();,
441,Line,"Each word should start with a capital letter EACH_FIRST_UPPERS('f'),",,
442,Line,entries will be sorted based on their internal IDs,comparators.add(new IdComparator());,
443,Line,Entry type unknown -> treat all fields as required,return Collections.emptySortedSet();,
444,Line,Error stream has been closed. See if there were any errors:,if (!sb.toString().trim().isEmpty()) {,
445,Javadoc,Executes the parsing logic and returns a result containing all information and the generated BibDatabase.,AuxParserResult parse(Path auxFile);,
446,Line,"exportInTitleOrder => title, author, editor","prefs.putBoolean(JabRefPreferences.EXPORT_IN_SPECIFIED_ORDER, true);",
447,Line,field-based check,return BibDatabaseMode.BIBTEX;,
448,Javadoc,Fields to check for DOIs.,"private static final List<Field> FIELDS = Arrays.asList(StandardField.NOTE, StandardField.URL, new UnknownField(""ee""));",
449,Line,File type is not given and therefore no application specified Let the OS handle the opening of the file,"NATIVE_DESKTOP.openFile(filePath, """");",
450,Line,Filter text field,setupClearButtonField(searchField);,
451,Javadoc,Finds the entry with a specified ID.,public synchronized Optional<BibEntry> getEntryById(String id) {,
452,Line,"First ask if the user really wants to close, if the library has not been saved since last save.",List<String> filenames = new ArrayList<>();,
453,Line,"First character and character after a "":"" as upper case - everything else in lower case. Obey {}.","TITLE_LOWERS('t'),",
454,Line,First check if the Doi Field is empty,if (entry.hasField(StandardField.DOI)) {,
455,Line,first clear existing content,this.getChildren().clear();,
456,Line,First compute citation markers for all citations:,String[] citMarkers = new String[names.size()];,
457,Line,First priority: VM argument,"LOGGER.info(""Using css from VM option: "" + cssVmArgument);",
458,Line,"First, make a Map of all entries:","Map<String, BibtexString> remaining = new HashMap<>();",
459,Line,for all types,private final TextFlow descriptionTextFlow = new TextFlow();,
460,Line,for KeywordGroup,private final TextField keywordGroupSearchTerm = new TextField();,
461,Javadoc,"Formats the DOI (e.g. removes http part) and also moves DOIs from note, url or ee field to the doi field.",public class DoiCleanup implements CleanupJob {,
462,Javadoc,Get all strings used in the entries.,public Collection<BibtexString> getUsedStrings(Collection<BibEntry> entries) {,
463,Javadoc,"Get the descendant of this node as indicated by the indexedPath. <p> If the path could not be traversed completely (i.e. one of the child indices did not exist), an empty Optional will be returned.",public Optional<T> getDescendant(List<Integer> indexedPath) {,
464,Javadoc,"Get the path from the root node to this node. <p> The elements in the returned list represent the child index of each node in the path, starting at the root. If this node is the root node, the returned list has zero elements.",public List<Integer> getIndexedPathFromRoot() {,
465,Javadoc,"Gets a forward-order list of this node's children. <p> The returned list is unmodifiable - use the add and remove methods to modify the nodes children. However, changing the nodes children (for example by calling moveTo) is reflected in a change of the list returned by getChildren. In other words, getChildren provides a read-only view on the children but not a copy.",public ObservableList<T> getChildren() {,
466,Javadoc,Gets a ScrollPane to display error info when recommendations fail.,private ScrollPane getErrorInfo() {,
467,Line,global variable to store the current brace level,private int braceLevel;,
468,Line,Icon and group name,new ViewModelTreeTableCellFactory<GroupNodeViewModel>(),
469,Line,"icon.setToolTipText(Localization.lang(""Open folder""));","TABLE_ICONS.put(StandardField.FOLDER, icon);",
470,Line,"icon.setToolTipText(Localization.lang(""Open"") + "" DOI "" + Localization.lang(""web link""));","TABLE_ICONS.put(StandardField.DOI, icon);",
471,Line,"icon.setToolTipText(Localization.lang(""Open"") + "" PS"");","TABLE_ICONS.put(StandardField.PS, icon);",
472,Line,If entry found,if (entry.isPresent()) {,
473,Line,"if field contains only one value, it has to be nulled otherwise, another setting does not empty the field","field.getValues().size() == 1,",
474,Line,"If no changes have been stored, simply use the defaults:","if (Globals.prefs.get(JabRefPreferences.EXTERNAL_FILE_TYPES, null) == null) {",
475,Line,"if no modifier keys are pressed, only special keys can be shortcuts",if (modifiers.isEmpty()) {,
476,Javadoc,"If the label represents a string contained in this database, returns that string's content. Resolves references to other strings, taking care not to follow a circular reference pattern. If the string is undefined, returns null.","private String resolveString(String label, Set<String> usedIds, Set<String> allUsedIds) {",
477,Line,"If the option is enabled, open the last edited libraries, if any.",if (!isBlank && Globals.prefs.getBoolean(JabRefPreferences.OPEN_LAST_EDITED)) {,
478,Line,"If the suffix doesn't seem to give any reasonable file type, try with the non-stripped link:",int index = link.lastIndexOf('.');,
479,Line,"If this directory is relative, we try to interpret it as relative to the file path of this BIB file:",Optional<File> databaseFile = getDatabaseFile();,
480,Line,"If we are supposed to set character format for citations, test this before making any changes. This way we can throw an exception before any reference marks are removed, preventing damage to the user's document:",if (style.isFormatCitations()) {,
481,Line,"If we don't have numbered entries, we need to sort the entries before adding them:",if (style.isSortByPosition()) {,
482,Line,initial service manager,XMultiComponentFactory xLocalServiceManager = xLocalContext.getServiceManager();,
483,Line,insert basic jurt factories,"insertBasicFactories(xSet, xImpLoader);",
484,Line,Insert bookmark:,"String bName = getUniqueReferenceMarkName(keyString,",
485,Line,insert the bridgefactory,"xSet.insert(xImpLoader.activate(""com.sun.star.comp.bridgefactory.BridgeFactory"", null, null, null));",
486,Line,insert the factory of the URLResolver,"xSet.insert(xImpLoader.activate(""com.sun.star.comp.urlresolver.UrlResolver"", null, null, null));",
487,Javadoc,Inserts a Bibtex String.,public synchronized void addString(BibtexString string) throws KeyCollisionException {,
488,Javadoc,Inserts each citation into a XLSFO body and copies it to the clipboard,protected static ClipboardContent processXslFo(List<String> citations) {,
489,Javadoc,"Inserts the entry, given that its ID is not already in use. use Util.createId(...) to make up a unique ID for an entry.",public synchronized boolean insertEntry(BibEntry entry) throws KeyCollisionException {,
490,Javadoc,Joins every citation with a newline and returns it.,protected static ClipboardContent processText(List<String> citations) {,
491,Line,"keep subtree handle, but restore everything else from backup",subtreeRoot.removeAllChildren();,
492,Line,Kill backslash,sb.deleteCharAt(sb.length() - 1);,
493,Line,Log messages,"String issueDetails = ""<details>\n"" + ""<summary>"" + ""Detail information:"" + ""</summary>\n\n```\n""",
494,Javadoc,"Look up the directories set up for the given field type for this database. If no directory is set up, return that defined in global preferences. There can be up to three directory definitions for these files: the database's metadata can specify a general directory and/or a user-specific directory or the preferences can specify one. <p> The settings are prioritized in the following order and the first defined setting is used: <ol> <li>metadata</li> <li>user-specific directory</li> <li>preferences directory</li> <li>BIB file directory</li> </ol>","public List<String> getFileDirectories(Field field, FilePreferences preferences) {",
495,Javadoc,Looks for markings (such as __markedentry = {[Nicolas:6]}) in the given list of entries.,"private Multimap<String, BibEntry> getMarkingWithEntries(List<BibEntry> entries) {",
496,Line,Make sure to always run this in the JavaFX thread as the file monitor (and its notifications) live in a different thread,DefaultTaskExecutor.runInJavaFXThread(() -> {,
497,Javadoc,Makes sure that the given component is not visible.,public void hide(SidePaneType type) {,
498,Line,mergedString always present,"originalEntry.setField(field, mergedString.get());",
499,Javadoc,Migrate all preferences from net/sf/jabref to org/jabref,private static void upgradePrefsToOrgJabRef(Preferences mainPrefsNode) {,
500,Line,Migrate Import patterns Check for prefs node for Version <= 4.0,"if (mainPrefsNode.get(JabRefPreferences.IMPORT_FILENAMEPATTERN, null) != null) {",
501,Javadoc,Migrate LabelPattern configuration from versions <=3.5 to new BibtexKeyPatterns,private static void upgradeLabelPatternToBibtexKeyPattern(JabRefPreferences prefs) {,
502,Line,Migrate type specific patterns Check for prefs node for Version 3.3-3.5,"if (mainPrefsNode.nodeExists(""logic/labelpattern"")) {",
503,Line,no data,},
504,Line,no data,},
505,Line,No text documents found.,"throw new NoDocumentException(""No Writer documents found"");",
506,Line,node used for version <3.0,"} else if (mainPrefsNode.nodeExists(""labelPattern"")) {",
507,Line,node used for version 3.0-3.2,"} else if (mainPrefsNode.nodeExists(""logic/labelPattern"")) {",
508,Line,"None of namesAsIs, namesNatbib, namesAsIs, namesFf","return AuthorList.fixAuthorLastNameFirstCommas(nameToFormat, abbrAuthorNames, false);",
509,Line,normalize white spaces replace the placeholder if used,"command = command.replaceAll(""\\s+"", "" "");",
510,Line,Nothing to do,return;,
511,Line,"Now set up the array to write to prefs, containing all new types, all modified types, and a flag denoting each default type that has been removed:",String[][] array = new String[types.size() + defTypes.size()][];,
512,Line,"Now, do the actual removal:",if (!result.getToRemove().isEmpty()) {,
513,Line,Only relay event if the field changes are more than one character or a new field is edited,FieldChangedEvent fieldChange = (FieldChangedEvent) event;,
514,Javadoc,"Open an external file, attempting to use the correct viewer for it.","public static boolean openExternalFileAnyFormat(final BibDatabaseContext databaseContext, String link,",
515,Javadoc,Opens a new shared database tab with the given {@link DBMSConnectionProperties}. @param dbmsConnectionProperties Connection data @return BasePanel which also used by {@link SaveDatabaseAction},public BasePanel openNewSharedDatabaseTab(DBMSConnectionProperties dbmsConnectionProperties),
516,Line,originalString always present,"ce.addEdit(new UndoableFieldChange(originalEntry, field, originalString.get(), null));",
517,Javadoc,Perform import operation,public class ImportCommand extends SimpleCommand {,
518,Line,Preamble,if (preamble != null) {,
519,Line,pretend to be a browser (agent & referrer),connection.userAgent(URLDownload.USER_AGENT);,
520,Javadoc,"Provides context menus for the text fields of the entry editor. Note that we use {@link Supplier} to prevent an early instantiation of the menus. Therefore, they are attached to each text field but instantiation happens on the first right-click of the user in that field. The late instantiation is done by {@link org.jabref.gui.fieldeditors.EditorTextArea#addToContextMenu(java.util.function.Supplier)}.",public class EditorMenus {,
521,Line,Put the group nodes as content,Dragboard dragboard = treeTable.startDragAndDrop(TransferMode.MOVE);,
522,Line,"Query syntax to search for an entry that matches ""one"" and ""two"" in any field is: (+one +two)","return ""(%252B"" + query.trim().replaceAll(""\\s+"", ""%20%252B"") + "")"";",
523,Javadoc,Query the number of extra entries pulled in due to crossrefs from other entries.,public int getCrossRefEntriesCount() {,
524,Javadoc,"Receives a Collection of BibEntry instances, iterates through them, and removes all entries that have no fields set. This is useful for rooting out an unsucessful import (wrong format) that returns a number of empty entries.",public static List<BibEntry> purgeEmptyEntries(Collection<BibEntry> entries) {,
525,Line,register the undo event only if new cite keys were generated,if (compound.hasEdits()) {,
526,Line,Register undo action,for (FieldChange change : changes) {,
527,Line,Remember choice,autoRemoveExactDuplicates.set(true);,
528,Line,Remove all reference marks that don't look like JabRef citations:,List<String> result = new ArrayList<>();,
529,Line,Remove disclosure node since we display custom version in separate column Simply setting to null is not enough since it would be replaced by the default node on every change,row.setDisclosureNode(null);,
530,Line,remove filename,"uniqPath = uniqPath.substring(0, uniqPath.lastIndexOf(File.separator));",
531,Line,Remove separator,items.remove(0);,
532,Javadoc,"Removes the given child from this node's child list, giving it an empty parent.",public void removeChild(T child) {,
533,Javadoc,Removes the given entry. The Entry is removed based on the id {@link BibEntry#id},"public synchronized void removeEntry(BibEntry toBeDeleted, EntryEventSource eventSource) {",
534,Javadoc,Removes this node from its parent and makes it a child of the specified node by adding it to the end of children list. In this way the whole subtree based at this node is moved to the given node.,public void moveTo(T target) {,
535,Javadoc,Removes this node from its parent and makes it a child of the specified node. In this way the whole subchain based at this node is moved to the given node.,public void moveTo(T target) {,
536,Javadoc,"Represents a node in a chain. We view a chain as a vertical hierarchy and thus refer to the previous node as parent and the next node is a child. <p> In usual implementations, nodes function as wrappers around a data object. Thus normally they have a value property which allows access to the value stored in the node. In contrast to this approach, the ChainNode<T> class is designed to be used as a base class which provides the tree traversing functionality via inheritance. <p> Example usage: private class BasicChainNode extends ChainNode<BasicChainNode> { public BasicChainNode() { super(BasicChainNode.class); } }","@SuppressWarnings(""unchecked"") // We use some explicit casts of the form ""(T) this"". The constructor ensures that this cast is valid.",
537,Javadoc,"Represents a node in a tree. <p> Usually, tree nodes have a value property which allows access to the value stored in the node. In contrast to this approach, the TreeNode<T> class is designed to be used as a base class which provides the tree traversing functionality via inheritance. <p> Example usage: private class BasicTreeNode extends TreeNode<BasicTreeNode> { public BasicTreeNode() { super(BasicTreeNode.class); } } <p> This class started out as a copy of javax.swing.tree.DefaultMutableTreeNode.","// We use some explicit casts of the form ""(T) this"". The constructor ensures that this cast is valid.",
538,Javadoc,"Represents everything related to a BIB file. <p> The entries are stored in BibDatabase, the other data in MetaData and the options relevant for this file in Defaults.",public class BibDatabaseContext {,
539,Javadoc,Reset the List of external file types after user customization.,public void setExternalFileTypes(List<ExternalFileType> types) {,
540,Line,Restore window location and/or maximised state,if (Globals.prefs.getBoolean(JabRefPreferences.WINDOW_MAXIMISED)) {,
541,Javadoc,"Result of a duplicate search. Uses {@link System#identityHashCode(Object)} for identifying objects for removal, as completely identical {@link BibEntry BibEntries} are equal to each other.",class DuplicateSearchResult {,
542,Line,Return an instance that signifies an unknown file type:,return Optional.of(new UnknownExternalFileType(name));,
543,Javadoc,Returns relative size of the field editor in terms of display space. A value of 1 means that the editor gets exactly as much space as all other regular editors. A value of 2 means that the editor gets twice as much space as regular editors.,default double getWeight() { return 1; },
544,Javadoc,"Returns the {@link BibDatabaseMode} that equals the given string. The use of capital and small letters in the string doesn't matter.If neither ""bibtex"" nor ""biblatex"" is the given string, then an {@link IllegalArgumentException} will be thrown.",public static BibDatabaseMode parse(String data) {,
545,Javadoc,Returns the child at the specified index in this node's children collection.,public Optional<T> getChildAt(int index) {,
546,Javadoc,Returns the entry with the given bibtex key.,public synchronized Optional<BibEntry> getEntryByKey(String key) {,
547,Javadoc,Returns the list of entries sorted by the given comparator.,public synchronized List<BibEntry> getEntriesSorted(Comparator<BibEntry> comparator) {,
548,Javadoc,Returns the number of children of this node.,public int getNumberOfChildren() {,
549,Javadoc,Returns the number of entries.,public int getEntryCount() {,
550,Javadoc,Returns the number of occurrences of the given key in this database.,public int getNumberOfKeyOccurrences(String citeKey) {,
551,Javadoc,Returns the number of strings.,public int getStringCount() {,
552,Javadoc,Returns the root of the tree that contains this node. The root is the ancestor with an empty parent. Thus a node without a parent is considered its own root.,public T getRoot() {,
553,Javadoc,Returns this node's last child if it exists (otherwise returns an empty Optional).,public Optional<T> getLastChild() {,
554,Javadoc,Returns true if this node is an ancestor of the given node. <p> A node is considered an ancestor of itself.,public boolean isAncestorOf(T anotherNode) {,
555,Line,Revert the change.,try {,
556,Line,Run the actual open in a thread to prevent the program locking until the file is loaded.,if (!filesToOpen.isEmpty()) {,
557,Line,scan for PDF,"Elements elements = html.body().select(""a[href]"");",
558,Line,see https://stackoverflow.com/questions/28603224/sort-tableview-with-drag-and-drop-rows,int onSelectedDelta = 0;,
559,Line,"See if we removed the final one. If so, we must perhaps raise the BasePanel in question:",if (removed == initialCount) {,
560,Javadoc,"Sends the selected entry as email - by Oliver Kopp It uses the mailto:-mechanism Microsoft Outlook does not support attachments via mailto Therefore, the folder(s), where the file(s) belonging to the entry are stored, are opened. This feature is disabled by default and can be switched on at preferences/external programs",public class SendAsEMailAction implements BaseAction {,
561,Line,"Setting the character format failed, so we throw an exception that will result in an error message for the user. Before that, delete the space we inserted:","xViewCursor.goLeft((short) 1, true);",
562,Line,"setTitle(FRAME_TITLE + "" - "" + panel.getBibDatabaseContext().getDBMSSynchronizer().getDBName() + "" ["" + Localization.lang(""shared"") + ""]"" + modeInfo);",},
563,Line,Shift on Windows or no modifier,"LOGGER.debug(""Mode COPY"");",
564,Javadoc,"Should return the localized identifier to use for the tab. @return Identifier for the tab (for instance ""General"", ""Appearance"" or ""External Files"").",String getTabName();,
565,Line,Show editor if user want us to do this,BibEntry firstNewEntry = entriesToAdd.get(0);,
566,Javadoc,Shows a group add/edit dialog.,"public GroupDialog(DialogService dialogService, BasePanel basePanel, JabRefPreferences prefs, AbstractGroup editedGroup) {",
567,Line,skip further processing as prefs already have been migrated,} else {,
568,Line,skip further processing as prefs already have been migrated,"LOGGER.debug(""New prefs node already exists with content - skipping migration"");",
569,Javadoc,sorted by localization,"private final SortedMap<KeyBinding, String> bindings;",
570,Line,Store source for on focus out event in the source code (within its text area) and update source code for every change of entry field values,"BindingsHelper.bindContentBidirectional(entry.getFieldsObservable(), codeArea.focusedProperty(), onFocus -> {",
571,Line,Store the two entries,BibEntry one = selectedEntries.get(0);,
572,Line,store undo information,String newVal = FileFieldWriter.getStringRepresentation(linkedFile);,
573,Line,Strings that are still not found must have been removed.,for (BibtexString original : notMatched) {,
574,Line,Support the following gesture to select entries: click on one row -> hold mouse button -> move over other rows We need to select all items between the starting row and the row where the user currently hovers the mouse over It is not enough to just select the currently hovered row since then sometimes rows are not marked selected if the user moves to fast,"@SuppressWarnings(""unchecked"")",
575,Javadoc,Take the given collection of BibEntry and resolve any string references.,"public List<BibEntry> resolveForStrings(Collection<BibEntry> entriesToResolve, boolean inPlace) {",
576,Javadoc,Tears down all things started by JabRef <p> FIXME: Currently some threads remain and therefore hinder JabRef to be closed properly @param filenames the filenames of all currently opened files - used for storing them if prefs openLastEdited is set to true,private void tearDownJabRef(List<String> filenames) {,
577,Line,Test to see if we found anything,if (result == null) {,
578,Block,"The following state listener makes sure focus is registered with the correct database when the user switches tabs. Without this, cut/paste/copy operations would some times occur in the wrong tab.","EasyBind.subscribe(tabbedPane.getSelectionModel().selectedItemProperty(), tab -> {",
579,Javadoc,"The Formatter is used for a Filter design-pattern. Extending classes have to accept a String and returned a formatted version of it. Implementations have to reside in the logic package. Example: ""John von Neumann"" => ""von Neumann, John""",public abstract class Formatter {,
580,Line,"The lines above work also if the dir does not exist at all! NULL is accepted by the filechooser as no inital path Explicit null check, if somehow the parent is null, as Files.exists throws an NPE otherwise",if ((directory != null) && !Files.exists(directory)) {,
581,Javadoc,The log event will be forwarded to the {@link LogMessages} archive.,@Override,
582,Javadoc,"The MacAdapter calls this method when a ""BIB"" file has been double-clicked from the Finder.",public void openAction(String filePath) {,
583,Line,The string was removed or renamed locally. We guess that it was removed.,"BibtexString bs = new BibtexString(disk, content);",
584,Line,The user has modified from the default values:,while (preferences.hasKey(JabRefPreferences.CUSTOM_TAB_NAME + i)) {,
585,Line,Then set all fields that have been set by the user.,"for (Map.Entry<Field, String> field : newEntry.getFieldMap().entrySet()) {",
586,Javadoc,"This class contains some code taken from {@link com.sun.javafx.scene.control.behavior.TextInputControlBehavior}, witch is not accessible and thus we have no other choice. TODO: remove this ugly workaround as soon as control behavior is made public reported at https://github.com/javafxports/openjdk-jfx/issues/583",public class TextInputControlBehavior {,
587,Javadoc,"This class is used in the instance of a field being modified, removed or added.",public class FieldChange {,
588,Javadoc,"This class represents a change in any field value. The relevant information is the BibEntry, the field name, the old and the new value. Old/new values can be null.",public class UndoableKeyChange extends AbstractUndoableJabRefEdit {,
589,Javadoc,This class represents a view model for objects of the KeyBinding class. It has two properties representing the localized name of an action and its key bind. It can also represent a key binding category instead of a key bind itself.,public class KeyBindingViewModel {,
590,Javadoc,"This Event is automatically fired at the same time as {@link EntryEvent}, {@link GroupUpdatedEvent} or {@link MetaDataChangedEvent}.",public class BibDatabaseContextChangedEvent {,
591,Line,"This indicates that a specific importer was specified, and that this importer has thrown an IOException. We store the exception, so a relevant error message can be displayed.",importError = e;,
592,Javadoc,This is a simple string based suggestion provider. All generic suggestions T are turned into strings for processing.,private static class SuggestionProviderString<T> extends SuggestionProvider<T> {,
593,Line,this is the only exception explicitly thrown here,} catch (IllegalArgumentException ex) {,
594,Javadoc,"This method is called ""...Value"" to be in line with the other methods",public List<String> getDefaultValue() {,
595,Javadoc,"This method is called before the {@link #storeSettings()} method, to check if there are illegal settings in the tab, or if is ready to be closed. If the tab is *not* ready, it should display a message to the user informing about the illegal setting.",boolean validateSettings();,
596,Javadoc,This method is called when the user presses OK in the Preferences dialog. Implementing classes must make sure all settings presented get stored in JabRefPreferences.,void storeSettings();,
597,Javadoc,"This method removes the currently selected file from the set of journal abbreviation files. This will not remove existing files from the file system. The {@code activeFile} property will always change to the previous file in the {@code journalFiles} list property, except the first file is selected. If so the next file will be selected except if there are no more files than the {@code activeFile} property will be set to {@code null}.",public void removeCurrentFile() {,
598,Javadoc,"This method takes a string of the form [field1]spacer[field2]spacer[field3]..., where the fields are the (required) fields of a BibTex entry. The string is split into fields and spacers by recognizing the [ and ].",public static List<String> split(String bibtexKeyPattern) {,
599,Javadoc,This methods assures all information in the given entry is included as suggestions.,public void indexEntry(BibEntry bibEntry) {,
600,Line,this might be the PDF already as we follow redirects,"if (type.getMimeType().startsWith(""application/pdf"")) {",
601,Line,this seems not working,notificationPane.show(validationMessage.getMessage());,
602,Line,this should be impossible anyway,return;,
603,Javadoc,This starts the export of all files of all selected nodes in the file tree view.,private void startExport() {,
604,Line,"This String is used in the encoded list in prefs of external file type modifications, in order to indicate a removed default file type:","private static final String FILE_TYPE_REMOVED_FLAG = ""REMOVED"";",
605,Line,"This worker stored the style as filename. The CSLAdapter and the CitationStyleCache store the source of the style. Therefore, we extract the style source from the file.",String styleSource = null;,
606,Line,"TODO: Add undo if (!undo.isEmpty()) { ce.addEdit(UndoableChangeEntriesOfGroup.getUndoableEdit(new GroupTreeNodeViewModel(node), undo)); }",},
607,Line,"TODO: Add undo if (!undo.isEmpty()) { mPanel.getUndoManager().addEdit(UndoableChangeEntriesOfGroup.getUndoableEdit(mNode, undo));",},
608,Line,TODO: Move to OS.java,public static NativeDesktop getNativeDesktop() {,
609,Line,TODO: Null!,&& !(getNode().getParent().get().getGroup() instanceof AllEntriesGroup);,
610,Line,TODO: panel.getUndoManager().addEdit(ce);,,
611,Javadoc,TODO: Remove as soon as possible,public class CustomJFXPanel {,
612,Line,"TODO: warn if assignment has undesired side effects (modifies a field != keywords) if (!WarnAssignmentSideEffects.warnAssignmentSideEffects(group, groupSelector.frame)) { return; // user aborted operation }",,
613,Line,TODO: we should also check isNodeDescendant,boolean canDropOtherGroup = dragboard.hasContent(DragAndDropDataFormats.GROUP);,
614,Javadoc,Tries to find a fulltext URL for a given BibTex entry. Currently only uses the DOI if found.,@Override,
615,Javadoc,Tries to infer the database type by examining a BibDatabase database. All checks are based on the case-insensitive comparison of entry tag names. Only standard BibTex and Biblatex entry types are considered in the decision process. 1. Check if any of the entries is a type exclusive to Biblatex 2. Check if any exclusive Biblatex fields are present 3. Otherwise return BibTex,public static BibDatabaseMode inferMode(BibDatabase database) {,
616,Line,update tab titles,updateAllTabTitles();,
617,Line,Update tables:,if (bf.getDatabase() != null) {,
618,Line,use configured sorting strategy,List<FieldComparator> fieldComparators = saveOrder.get(),
619,Line,Use the currently shown positions of all visible components,int index = 0;,
620,Line,Used to detect string references in strings,"private static final Pattern REFERENCE_PATTERN = Pattern.compile(""(#[A-Za-z]+#)"");",
621,Javadoc,Variable that contains user-defined behavior for paste action.,private PasteActionHandler pasteActionHandler = () -> {,
622,Line,Warning before overwriting is only relevant if overwriting can happen:,warnBeforeOverwriting.setDisable(dontOverwrite.isSelected()));,
623,Line,Warp everything in a scroll-pane,ScrollPane scrollPane = new ScrollPane();,
624,Line,"we are the ""last"" to ask we don't have anything left",return getLastLevelBibtexKeyPattern(entryType);,
625,Line,"We check if the field has changed, since we don't want to mark the base as changed unless we have a real change.","if (!database.getPreamble().orElse("""").equals(newPreamble)) {",
626,Line,We found the next string ref. Append the text up to it.,if (next > 0) {,
627,Line,We have to use reflection since TableUtil is not visible to us,try {,
628,Line,"We have to use the model class here, as the content of the dragboard must be serializable","content.put(DragAndDropDataFormats.LINKED_FILE, selectedItem);",
629,Line,We need to keep a reference to the binding since it otherwise gets discarded,fieldBinding = entry.getFieldBinding(field);,
630,Line,we removed and added entries,"undoRemove.addEdit(UndoableChangeEntriesOfGroup.getUndoableEdit(this, changesAdd));",
631,Line,"We use some explicit casts of the form ""(T) this"". The constructor ensures that this cast is valid.","@SuppressWarnings(""unchecked"") public abstract class TreeNode<T extends TreeNode<T>> {",
632,Javadoc,"Write all strings in alphabetical order, modified to produce a safe (for BibTeX) order of the strings if they reference each other.",private void writeStrings(BibDatabase database) throws IOException {,
633,Line,Write meta data.,"writeMetaData(bibDatabaseContext.getMetaData(), preferences.getGlobalCiteKeyPattern());",
634,Line,Write preamble if there is one.,"writePreamble(bibDatabaseContext.getDatabase().getPreamble().orElse(""""));",
635,Line,Write to file:,"exporter.export(panel.getBibDatabaseContext(), tmp,",
